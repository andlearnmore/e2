<?php


$moves = ['rock', 'paper', 'scissors']; # Array of strings

// echo $moves[0];
// echo $moves[3]; # Notice: Undefined offset: 3

// var_dump($moves); # Output contents of array

$randomNumber = rand(0, 2);

// var_dump($randomNumber); # Confirm what number generated by rand()

$move = $moves[$randomNumber]; # Pick player's move

// var_dump($move); # Confirm that the move is working


# Associative Array: lets us define own keys for locating elements in array

// $coinValues = [
//     'penny' => .01,
//     'nickel' => .05,
//     'dime' => .10,
//     'quarter' => .25
// ];

// var_dump($coinValues['quarter']);

// $coinCounts = [
//   'penny' => 100,
//   'nickel' => 25,
//   'dime' => 100,
//   'quarter' => 34,
// ];


// 1 - related so logical to group together
// 2 - built-in functionality for arrays to take advantage of

// asort($coinCounts); # ABC sort by value

// arsort($coinCounts); # Reverse-ABC sort by value

// ksort($coinCounts); # ABC sort by key

// krsort($coinCounts); # Reverse-ABC sort by key

// var_dump($coinCounts);

// $cards = [1, 2, 3, 4, 5, 6, 7, 8, 9]; # Random sort of array

// shuffle($cards);

// var_dump($cards);

# foreach
# Syntax: foreach($coinCounts as $key => $value) {what is executed every time we iterate through loop}

// foreach ($coinCounts as $coin => $count) {
//     var_dump($coin);
//     var_dump($count);
// }

// $total = 0;

// foreach ($coinCounts as $coin => $count) {
//     $total = $total + ($count * $coinValues[$coin]); # Here, '$coin' is key
// }

// var_dump($total);

# Multidimensional Array

$total = 0;

$coins = [
  'penny' => [
    'count' => 100,
    'value' => .01
  ],
  'nickel' => [
    'count' => 25,
    'value'  => .05
  ],
  'dime' => [
    'count' => 100,
    'value'  => .10
  ],
  'quarter' => [
    'count' => 34,
    'value'  => .25
  ],
  'halfDollar' => [
    'count' => 10,
    'value'  => .50
  ]
];

foreach ($coins as $coin => $info) {
    $total = $total + ($info['count'] * $info['value']);
}

// var_dump($total);









#echo "Hello from week4.php";

// # BEFORE
// var_dump($phrases);
/**
// array(5) {
//   [0]=>
//   string(4) "hola"
//   [1]=>
//   string(5) "adios"
//   [2]=>
//   string(11) "hasta luego"
//   [3]=>
//   string(9) "por favor"
//   [4]=>
//   string(7) "de nada"
// }
*/

# Create array
$phrases = [
  'hola',
  'adios',
  'hasta luego',
  'por favor',
  'de nada'
];

# Loop through array, capitalizing each element in array
foreach ($phrases as $key => $value) {
    $phrases[$key] = strtoupper($value);
}

// var_dump($phrases);


# AFTER
// var_dump($phrases);
/**
// array(5) {
//   [0]=>
//   string(4) "HOLA"
//   [1]=>
//   string(5) "ADIOS"
//   [2]=>
//   string(11) "HASTA LUEGO"
//   [3]=>
//   string(9) "POR FAVOR"
//   [4]=>
//   string(7) "DE NADA"
// }
// */


# Initialize empty array to keep track of privileges
$age = 20;
$privileges = [];

if ($age > 16) {
    $privileges[] = 'drive';
}
if ($age > 18) {
    $privileges[] = 'vote';
}
if ($age > 21) {
    $privileges[] = 'purchase alcohol';
}
if ($age > 75) {
    $privileges[] = 'retire';
}

// var_dump($privileges);

# HW practice to deal cards

$cards = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
#shuffle($cards);

# Initialize empty arrays for playerCards and computerCards.
$playerCards = [];
$computerCards = [];


# Deal cards in an alternating fashion with a while-loop
// while (count($cards) > 0) {
//     array_push($playerCards, array_shift($cards));
//     array_push($computerCards, array_shift($cards));
// };
// Above not good because what if odd number of cards??

# Deal cards in an alternating fashion with a foreach-loop
foreach ($cards as key => $card) {
  if ($key % 2 == 0) {
      array_push($playerCards, array_shift($cards));
  } else {
          array_push($computerCards, array_shift($cards));
      };
  };

# Verify results
var_dump($playerCards); # Should yield 5 random cards when shuffled; odd numbers when not.
var_dump($computerCards); # Should yield 5 different random cards when shuffled; even when not.
